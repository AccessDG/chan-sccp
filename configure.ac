dnl Process this file with autoconf to produce a configure script.
AC_PREREQ(2.53)
AC_INIT([Chan_SCCP],
        [TRUNK],
        [https://sourceforge.net/projects/chan-sccp-b/],
        [Chan_SCCP])

AC_CONFIG_AUX_DIR([autoconf])
AC_CONFIG_MACRO_DIR([autoconf])

dnl Get version information from repository
CS_GET_VERSION([.])

dnl cross-compile macros
AC_CANONICAL_BUILD
AC_CANONICAL_HOST
AC_CANONICAL_TARGET 
dnl AC_DISABLE_STATIC

dnl AC_CONFIG_HEADER(src/config.h.in:src/config.h)
AC_CONFIG_HEADER(src/config.h)

AH_TOP([
/*!
 * \file 	config.h
 * \brief 	SCCP Config File
 * \author 	Diederik de Groot <dkgroot [at] talon.nl>
 * \note	This file is automatically generated by configure
 * \note 	Do not change this file. Change will be lost when running configure
 */

#ifndef CHAN_SCCP_CONFIG_H
#define CHAN_SCCP_CONFIG_H
])

dnl AM_INIT_AUTOMAKE([gnu 1.5 no-define dist-bzip2 dist-tarZ])
CONFIGURE_PART([Checking AutoMake:])
AM_INIT_AUTOMAKE([1.9 -Wno-portability check-news dist-bzip2 dist-tarZ no-define nostdinc])
m4_ifdef([AM_SILENT_RULES],[AM_SILENT_RULES([yes])])
AM_DISABLE_STATIC([])

# check existence of the package
AC_CONFIG_SRCDIR([src/chan_sccp.c]) 

AC_COPYRIGHT("Chan_SCCP")
AC_REVISION($Revision$) 
# Build paths and variables
dnl Create the relevant Build variables
AC_PATH_TOOL([UNAME], [uname], No)
if test ! x"${UNAME}" = xNo; then
    if test -n $BUILD_OS ; then
        BUILD_DATE="`date -u "+%Y-%m-%d %H:%M:%S"` UTC"
	AC_DEFINE_UNQUOTED([BUILD_DATE],"`date -u "+%Y-%m-%d %H:%M:%S"` UTC",[The date of this build])
	AC_DEFINE_UNQUOTED([BUILD_OS],"`${UNAME} -s`",[Operating System we are building on])
	AC_DEFINE_UNQUOTED([BUILD_MACHINE],"`${UNAME} -m`",[Machine we are building on])
	AC_DEFINE_UNQUOTED([BUILD_HOSTNAME],"`${UNAME} -n`",[Hostname of our Box])
	AC_DEFINE_UNQUOTED([BUILD_KERNEL],"`${UNAME} -r`",[Kernel version of this build])
	AC_DEFINE_UNQUOTED([BUILD_USER],"`${WHOAMI}`",[building user])
	AC_SUBST([BUILD_DATE])
	AC_SUBST([BUILD_OS])
	AC_SUBST([BUILD_MACHINE])
	AC_SUBST([BUILD_HOSTNAME])
	AC_SUBST([BUILD_KERNEL])
	AC_SUBST([BUILD_USER])
    fi
fi

AC_DEFINE_UNQUOTED([BUILD_USER],"`${WHOAMI}`",[building user])

CONFIGURE_PART([Checking host platform:])
case "${host}" in
     *freebsd*)
     ac_default_prefix=/usr/local
     ;;
     *)
     ac_default_prefix=/usr
     if test ${sysconfdir} = '${prefix}/etc'; then
        sysconfdir=/etc
     fi
     if test ${mandir} = '${prefix}/man'; then
        mandir=/usr/share/man
     fi
     ;;
esac

if test ${localstatedir} = '${prefix}/var'; then
     localstatedir=/var
fi

# guest OS type
case "${host}" in
  cygwin*|mingw*|windows*|winnt)
    AC_DEFINE(Win32, 1,
              [Define according to your operating system type.])
    CS_OSTYPE="CYGWIN"
# this is ugly - KPF
  OSISWIN32=1
  AC_SUBST(OSISWIN32)
    ;;
  *linux*)
    AC_DEFINE(Linux, 1,
              [Define according to your operating system type.])
    CS_OSTYPE="Linux"
    ;;
  *netbsd*)
    AC_DEFINE(NetBSD, 1,
              [Define according to your operating system type.])
    CS_OSTYPE="NetBSD"
    ;;
  *freebsd*)
    AC_DEFINE(FreeBSD, 1,
              [Define according to your operating system type.])
    CS_OSTYPE="FreeBSD"
    # XXX temporary hack to let FreeBSD use the default paths
    # for local stuff. We need a better solution.
    if test x"${CPPFLAGS}" = x; then
        CPPFLAGS="-I /usr/local/include"
    fi
    if test x"${LDFLAGS}" = x; then
        LDFLAGS="-L /usr/local/lib"
    fi
    ;;
  *openbsd*)
    AC_DEFINE(OpenBSD, 1,
              [Define according to your operating system type.])
    CS_OSTYPE="OpenBSD"
    ;;
  *sun*)
    AC_DEFINE(SunOS, 1,
              [Define according to your operating system type.])
    CS_OSTYPE="SunOS"
    ;;
  *darwin*)
    AC_DEFINE(Darwin, 1,
              [Define according to your operating system type.])
    CS_OSTYPE="Darwin"
    ;;
  *)
    AC_DEFINE(Unix, 1,
              [Define according to your operating system type.])
    CS_OSTYPE="Unix"
   ;;
esac
AC_SUBST(CS_OSTYPE)

# This needs to be before any macros that use the C compiler
AC_GNU_SOURCE

# cross-compile checks
if test x"${build}" != x"${host}"; 
then
   CONFIGURE_PART([Checking Cross-Compile:])
   AC_CHECK_TOOL(CC, gcc, :)
   AC_CHECK_TOOL(AR, ar, :)
   if test x"${CS_OSTYPE}" = xWin32;
   then
      AC_CHECK_TOOL(NM, nm, :)
      AC_CHECK_TOOL(WINDRES, windres, :)
      AC_CHECK_TOOL(DLLWRAP, dllwrap, :)
   fi
   crossCompile="Yes"
fi

# Checks for programs.
CONFIGURE_PART([Checking for standard programs:])
AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_LIBTOOL   
AC_PROG_AWK
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_LANG_C
AC_C_INLINE 		dnl wanted by: src/chan_sccp.h:138

AC_PATH_PROGS(GREP, ggrep grep,[echo Missing grep so skipping but I doubt we will get anywhere])
AC_PATH_PROGS(SVN, svn, [echo Missing subversion so some stuff will be borked],${PATH}:/opt/csw/bin)
AC_PATH_PROGS(SHELL,bash sh,[echo No compatible shell found])
AC_PATH_PROGS(SH,bash sh,[echo No compatible shell found])
AC_PATH_PROGS(M4,gm4 m4,[echo No m4 found, who will process my macros now ?])
AC_PATH_PROGS(SED,gsed sed,[echo sed not found, doh!])
AC_PATH_PROGS(CAT,cat,[echo cat not found, Doh!])
AC_PATH_PROGS(TR,tr,[echo tr not found, need this for upper/lowercase conversions])
AC_PATH_PROGS(UNAME,uname,[echo uname not found so no version info will be available])
AC_PATH_PROGS(WHOAMI,whoami,[echo whoami not found so no version info will be available])

# LibTool
CONFIGURE_PART([Checking Libtool:])
LT_PREREQ([2.0.0])
LT_INIT([dlopen])
LTDL_INIT([])
if test "x$with_included_ltdl" != "xyes"; then
  save_CFLAGS="$CFLAGS"
  save_LDFLAGS="$LDFLAGS"
  CFLAGS="$CFLAGS $LTDLINCL"
  LDFLAGS="$LDFLAGS $LIBLTDL"
  AC_CHECK_LIB([ltdl], [lt_dladvise_init],
                [],
        [AC_MSG_ERROR([installed libltdl is too old])])
  LDFLAGS="$save_LDFLAGS"
  CFLAGS="$save_CFLAGS"
fi
AC_SUBST([LIBTOOL_DEPS])

LIBS_save=$LIBS
LIBS="$LIBS"

# Check for headers, structures, typedefs, libs etc which are not related to specific add-on packages
CONFIGURE_PART([Checking for Required Libraries:])
dnl check for required libraries (also for add-ons)
AC_CHECK_LIB([c], [main])
AC_CHECK_HEADER([asterisk.h],,[compile_for_asterisk="no"])
AC_CHECK_HEADER([callweaver.h],,[compile_for_callweaver="no"])
AC_CHECK_HEADERS([sys/ioctl.h]) 
AC_CHECK_HEADERS([sys/socket.h])
AC_CHECK_HEADERS([netinet/in.h])
AC_CHECK_HEADERS([pthread.h])

AC_HEADER_STDBOOL
AC_TYPE_INT32_T
AC_TYPE_INT64_T
AC_TYPE_SIZE_T
AC_TYPE_SSIZE_T
AC_TYPE_UINT16_T 
AC_TYPE_UINT32_T 
AC_TYPE_UINT8_T

dnl
dnl Check for svn2cl for generating ChangeLog
dnl
enable_svn2cl=yes
AC_PATH_PROG([SVN2CL], [svn2cl])
if test -z "$SVN2CL"; then
  enable_svn2cl=no
fi

AM_CONDITIONAL(ENABLE_SVN2CL, test x$enable_svn2cl != xno)

AC_ARG_WITH(changelog-oldest,
	    AC_HELP_STRING([--with-changelog-oldest=NUMBER],
			   [Oldest revision to include in ChangeLog]))

CHANGELOG_OLDEST=1021
if test "x$with_changelog_oldest" != "x" ; then
  CHANGELOG_OLDEST=$with_changelog_oldest
fi
AC_SUBST(CHANGELOG_OLDEST) 

dnl checks for library functions
AC_PROG_GCC_TRADITIONAL
AC_FUNC_MALLOC 
AC_FUNC_REALLOC
AC_CHECK_FUNCS([socket])		dnl wanted by: src/sccp_socket.c:364
AC_CHECK_FUNCS([memset]) 		dnl wanted by: src/sccp_device.c:52
AC_CHECK_FUNCS([select]) 		dnl wanted by: src/sccp_socket.c:365
AC_CHECK_FUNCS([strcasecmp]) 		dnl wanted by: src/sccp_device.c:406
AC_CHECK_FUNCS([strchr]) 		dnl wanted by: src/chan_sccp.c:153
AC_CHECK_FUNCS([strdup]) 		dnl wanted by: src/chan_sccp.c:151
AC_CHECK_FUNCS([strerror]) 		dnl wanted by: src/chan_sccp.c:709
AC_CHECK_FUNCS([strncasecmp]) 		dnl wanted by: src/chan_sccp.c:321

# Big Endian / Little Endian	
AC_C_BIGENDIAN(AC_DEFINE([__BYTE_ORDER],__BIG_ENDIAN,[Big Endian]),AC_DEFINE([__BYTE_ORDER],__LITTLE_ENDIAN,[Little Endian]))
AC_DEFINE([__LITTLE_ENDIAN],1234,[for the places where it is not defined])
AC_DEFINE([__BIG_ENDIAN],4321,[for the places where it is not defined])

# Configure Options
CONFIGURE_PART([Checking Configure Options:])

dnl Optimize for host cpu version
AC_ARG_ENABLE(optimization,     
	[AC_HELP_STRING([--disable-optimization],[no detection or tuning flags for cpu version])],
	[OPTIMIZECPU="$enableval"],[OPTIMIZECPU="yes"])

dnl Enable debugging
AC_ARG_ENABLE(debug,
	[AC_HELP_STRING([--enable-debug],[build with debug information])],,[enable_debug="no"])
if test "${enable_debug}" = "yes"; then
   AC_DEFINE([DEBUG],[],[Enable extra debugging.])
   enable_do_crash="yes"
   enable_debug_mutex="yes"
fi
AM_CONDITIONAL([WANT_DEBUG],[test "${enable_debug}" = "yes"])

AC_ARG_WITH([asterisk],
    [AC_HELP_STRING([--with-asterisk=PATH],[Location of OpenSSL installation])],,[withval="/usr"])
AC_ARG_WITH([callweaver],
    [AC_HELP_STRING([--with-callweaver=PATH],[Location of OpenSSL installation])],,[withval="/usr"])
AC_ARG_WITH(asterisk-includes,
    AS_HELP_STRING([--with-asterisk-includes=PATH], [Path to Asterisk includes (defaults to PREFIX/include)]),
    [ASTERISK_CFLAGS="-I$withval"])
AC_ARG_WITH(asterisk-libs,
    AS_HELP_STRING([--with-asterisk-libs=PATH], [Path to Asterisk includes (defaults to PREFIX/lib)]),
    [ASTERISK_LDFLAGS="-L$withval"])
AC_ARG_WITH(callweaver-includes,
    AS_HELP_STRING([--with-callweaver-includes=PATH], [Path to CallWeaver includes (defaults to PREFIX/include)]),
    [CALLWEAVER_CFLAGS="-I$withval"])
AC_ARG_WITH(callweaver-libs,
    AS_HELP_STRING([--with-callweaver-libs=PATH], [Path to CallWeaver includes (defaults to PREFIX/lib)]),
    [CALLWEAVER_LDFLAGS="-L$withval"])
   
   
echo "withval: $withval"
PBX_MANDATORY="yes"
CS_CHECK_PBX


echo "PBX_TYPE:		$PBX_TYPE"
echo "HAVE_ASTERISK:	$HAVE_ASTERISK"
echo "HAVE_CALLWEAVER:	$HAVE_CALLWEAVER"
echo "PBX_LIB:		$PBX_LIB"
echo "PBX_INCLUDE:		$PBX_INCLUDE"
echo "PBX_MODDIR:		$PBX_MODDIR"
echo "PBX_CFLAGS:		$PBX_CFLAGS"
echo "PBX_CXXFLAGS:		$PBX_CXXFLAGS"


if test "${USE_ASTERISK}" != "no"; then
   AC_MSG_CHECKING(for asterisk.h)
   saved_cppflags="${CPPFLAGS}"
   if test "x${PBX_DIR}" != "x"; then
      CPPFLAGS="${CPPFLAGS} -I${PBX_DIR}/include"
      else
      CPPFLAGS="${CPPFLAGS} -I${withval}/include"
   fi
   
   AC_COMPILE_IFELSE(
	[
	AC_LANG_PROGRAM(
	[#include <asterisk.h>],
	[])
	],
	[	AC_MSG_RESULT(yes) 
		ac_cv_asterisk_h="yes" 
	],
	[	AC_MSG_RESULT(no) 
		ac_cv_asterisk_h="no" 
	]
	)
   CPPFLAGS="${saved_cppflags}"
   if test "${ac_cv_asterisk_h}" = "yes"; then
	if test "${PBX_DIR}" != ""; then
	   PBX_INCLUDE="-I${PBX_DIR}/include"
	fi
	PBX_ASTERISK=1
	AC_DEFINE([HAVE_ASTERISK], 1, [Define if your system has the Asterisk headers.])
   fi
   AC_MSG_CHECKING(for callweaver.h)
   if test "x${PBX_DIR}" != "x"; then
      CPPFLAGS="${CPPFLAGS} -I${PBX_DIR}/include"
   fi
   AC_COMPILE_IFELSE(
	[
	AC_LANG_PROGRAM(
	[#include <callweaver.h>],
	[])
	],
	[	AC_MSG_RESULT(yes) 
		ac_cv_callweaver_h="yes" 
	],
	[	AC_MSG_RESULT(no) 
		ac_cv_callweaver_h="no" 
	]
	)
   if test "${ac_cv_callweaver_h}" = "yes"; then
	if test "${PBX_DIR}" != ""; then
	   PBX_INCLUDE="-I${PBX_DIR}/include"
	fi
	PBX_CALLWEAVER=1
	AC_DEFINE([HAVE_CALLWEAVER], 1, [Define if your system has the Asterisk headers.])
   fi
   if test ! -z "${PBX_MANDATORY}"; then
     if test "${ac_cv_callweaver_h}" != "yes" && test "${ac_cv_asterisk_h}" != "yes"
     then
        AC_MSG_NOTICE([***])
        AC_MSG_NOTICE([*** The Asterisk installation on this system appears to be broken.])
        AC_MSG_NOTICE([*** Either correct the installation, or run configure])
        AC_MSG_NOTICE([*** including --without-asterisk.])
        exit 1
     fi
   fi
fi

dnl Add Arguments to configure
AC_ARG_WITH(pickup, 
  AC_HELP_STRING([--with-pickup],       [build with pickup function (default is YES)]), 
  ac_cv_use_pickup=no, ac_cv_use_pickup=yes)
	AS_IF([test "${ac_cv_use_pickup}" == "yes"], [
        	AC_DEFINE(CS_SCCP_PICKUP, 1, [Enable pickup function])
])

AC_ARG_WITH(park, 
  AC_HELP_STRING([--with-park], [build with park funktion (default is YES)]), 
  ac_cv_use_park=no, ac_cv_use_park=yes)
	AS_IF([test "${ac_cv_use_park}" == "yes"], [
        	AC_DEFINE(CS_SCCP_PARK, 1, [Enable park function])
])

AC_ARG_WITH(dirtrfr, 
  AC_HELP_STRING([--with-dirtrfr], [Build DIRTRFR functions (default is YES)]), 
  ac_cv_use_dirtrfr=no, ac_cv_use_dirtrfr=yes)
	AS_IF([test "${ac_cv_use_dirtrfr}" == "yes"], [
        	AC_DEFINE(CS_SCCP_DIRTRFR, 1, [Enable DIRTRFR function])
])

AC_ARG_WITH(monitor, 
  AC_HELP_STRING([--with-monitor], [Build monitor functions (default is YES)]), 
  ac_cv_use_monitor=no, ac_cv_use_monitor=yes)
	AS_IF([test "${ac_cv_use_monitor}" == "yes"], [
        	AC_DEFINE(CS_SCCP_FEATURE_MONITOR, 1, [Enable monitor function])
])

AC_ARG_WITH(conference, 
  AC_HELP_STRING([--with-conference], [Build conference functions (default is NO)]), 
  ac_cv_use_conference=yes, ac_cv_use_conference=no)
AS_IF([test "${ac_cv_use_conference}" == "yes"], [
        AC_DEFINE(CS_SCCP_CONFERENCE, 1, [Enable conference function])
])

AC_ARG_WITH(manager, 
  AC_HELP_STRING([--with-manager], [Build manager functions (default is YES)]), 
  ac_cv_use_manager=no, ac_cv_use_manager=yes)
	AS_IF([test "${ac_cv_use_manager}" == "yes"], [
        	AC_DEFINE(CS_MANAGER_EVENTS, 1, [Enable manager events])
	        AC_DEFINE(CS_SCCP_MANAGER, 1, [Enable manager console control])
])

AC_ARG_WITH(indications, 
  AC_HELP_STRING([--with-indications], [Debug SCCP indications (default is NO)]), 
  ac_cv_debug_indications=yes, ac_cv_debug_indications=no)
	AS_IF([test "${ac_cv_debug_indications}" == "yes"], [
        	AC_DEFINE(CS_DEBUG_INDICATIONS, 1, [Debug SCCP indications])
])

AC_ARG_WITH(realtime, 
  AC_HELP_STRING([--with-realtime], [Debug SCCP realtime (default is YES)]), 
  ac_cv_realtime=no, ac_cv_realtime=yes)
    AS_IF([test "${ac_cv_realtime}" == "yes"], [
    	AC_DEFINE(CS_SCCP_REALTIME, 1, [Debug SCCP realtime])
])

AC_ARG_WITH(feature_monitor, 
  AC_HELP_STRING([--with-feature-monitor], [Debug SCCP feature monitor (default is NO)]), 
  ac_cv_feature_monitor=yes, ac_cv_feature_monitor=no)
    AS_IF([test "${ac_cv_feature_monitor}" == "yes"], [
       	AC_DEFINE(CS_SCCP_FEATURE_MONITOR, 1, [Debug SCCP feature monitor])
])


AC_ARG_WITH(advanced_functions, 
  AC_HELP_STRING([--with-advanced-functions], [Debug SCCP advanced functions (default is NO)]), 
    ac_cv_advanced_functions=yes, ac_cv_advanced_functions=no)
    AS_IF([test "${ac_cv_advanced_functions}" == "yes"], [
       	AC_DEFINE(CS_ADV_FEATURES, 1, [Debug SCCP advanced functions])
])

AC_ARG_WITH(dynamic_speeddial, 
  AC_HELP_STRING([--with-dynamic-speeddial], [Using dynamic speeddials (default is NO)]), 
  ac_cv_dynamic_speeddial=yes, ac_cv_dynamic_speeddial=no)
    AS_IF([test "${ac_cv_dynamic_speeddial}" == "yes"], [
       	AC_DEFINE(CS_DYNAMIC_SPEEDDIAL, 1, [Using dynamic speeddials])
])

dnl Figure out the Asterisk Version
CONFIGURE_PART([Checking Asterisk Headers:])
if test "${PBX_TYPE}" = "Asterisk"; then
  AC_CHECK_HEADER(asterisk/version.h,[
    AC_MSG_CHECKING([for version in asterisk/version.h])
    
    AC_SUBST([ASTERISK_VERSION_NUM])
    dnl The rest is for backward support of old sources, should be removed shortly
    if grep -q "\"1\.6" $PBX_INCLUDE/version.h; then
      AC_DEFINE(ASTERISK_CONF_1_6, 1, [Define ASTERISK_CONF_1_6])
      AC_MSG_RESULT([Found 'Asterisk Version 1.6.x'])
      REALTIME_USEABLE=1
    elif grep -q "trunk" $PBX_INCLUDE/version.h; then
      AC_DEFINE(ASTERISK_CONF_1_6, 1, [Define ASTERISK_CONF_1_6])
      AC_MSG_RESULT([Found 'Asterisk Version 1.6.x (Trunk)'])
      REALTIME_USEABLE=1
    elif grep -q "\"SVN-branch-1\.6" $PBX_INCLUDE/version.h; then
      AC_DEFINE(ASTERISK_CONF_1_6, 1, [Define ASTERISK_CONF_1_6])
      AC_MSG_RESULT([Found 'Asterisk Version 1.6.x (Branch)'])
      REALTIME_USEABLE=1
    elif grep -q "\"1\.4" $PBX_INCLUDE/version.h; then
      AC_DEFINE(ASTERISK_CONF_1_4, 1, [Define ASTERISK_CONF_1_4])
      AC_MSG_RESULT([Found 'Asterisk Version 1.4.x'])
      REALTIME_USEABLE=1
    elif grep -q "\"SVN-branch-1\.4" $PBX_INCLUDE/version.h; then
      AC_DEFINE(ASTERISK_CONF_1_4, 1, [Define ASTERISK_CONF_1_4])
      AC_MSG_RESULT([Found 'Asterisk Version 1.4.x (Branch)'])
      REALTIME_USEABLE=1
    elif grep -q "\"1\.2" $PBX_INCLUDE/version.h; then
      AC_DEFINE(ASTERISK_CONF_1_2, 1, [Define ASTERISK_CONF_1_2])
      AC_MSG_RESULT([Found 'Asterisk Version 1.2.x'])
      REALTIME_USEABLE=0
    elif grep -q "\"SVN-branch-1\.2" $PBX_INCLUDE/version.h; then
      AC_DEFINE(ASTERISK_CONF_1_2, 1, [Define ASTERISK_CONF_1_2])
      AC_MSG_RESULT([Found 'Asterisk Version 1.2.x (Branch)'])
      REALTIME_USEABLE=0
    else 
      AC_MSG_RESULT([Asterisk Version could not be determined'])
    fi
  ],AC_MSG_RESULT([Not Found 'asterisk/version.h']))


dnl NEW NEW
  dnl Save Current CFLAGS / CPPFLAGS
  CFLAGS_saved="${CFLAGS}"
  CPPFLAGS_saved="${CPPFLAGS}"
  LDFLAGS_saved="${LDFLAGS}"
  
  dnl Set Temporary Test CFLAGS / CPPFLAGS
dnl  CFLAGS="-DPTHREAD_MUTEX_RECURSIVE -pthread -D_REENTRANT"
dnl  CPPFLAGS="${CFLAGS}"
dnl  LDFLAGS="-lpthread -MD -MP"

dnl  echo "CFLAGS: $CFLAGS"
dnl  echo "LDFLAGS: $LDFLAGS"
  dnl Run Header Test
  AC_CHECK_HEADER([asterisk/lock.h],AC_DEFINE(HAVE_ASTERISK_LOCK_H,1,[Found 'asterisk/lock.h']),[lock_compiled=no],[#include <asterisk.h>])
  AS_IF([test "${lock_compiled}" != "no"], [
    AC_CHECK_HEADER([asterisk/app.h],		AC_DEFINE(HAVE_ASTERISK_APP_H,1,[Found 'asterisk/app.h']),,			[ #include <asterisk.h>])
    AC_CHECK_HEADER([asterisk/rtp.h],		AC_DEFINE(HAVE_ASTERISK_RTP_H,1,[Found 'asterisk/rtp.h']),,			[ #include <asterisk.h>])
    AC_CHECK_HEADER([asterisk/endian.h],	AC_DEFINE(HAVE_ASTERISK_ENDIAN_H,1,[Found 'asterisk/endian.h']),,		[ #include <asterisk.h>])
    AC_CHECK_HEADER([asterisk/event.h],		AC_DEFINE(HAVE_ASTERISK_EVENT_H,1,[Found 'asterisk/event.h']),,			[ #include <asterisk.h>])
    AC_CHECK_HEADER([asterisk/channel.h],	AC_DEFINE(HAVE_ASTERISK_CHANNEL_H,1,[Found 'asterisk/channel.h']),,		[ #include <asterisk.h>])
    AC_CHECK_HEADER([asterisk/config.h],	AC_DEFINE(HAVE_ASTERISK_CONFIG_H,1,[Found 'asterisk/config.h']),,		[ #include <asterisk.h>])
    AC_CHECK_HEADER([asterisk/strings.h],	AC_DEFINE(HAVE_ASTERISK_STRINGS_H,1,[Found 'asterisk/strings.h']),,		[ #include <asterisk.h>])
    AC_CHECK_HEADER([asterisk/pbx.h],		AC_DEFINE(HAVE_ASTERISK_PBX_H,1,[Found 'asterisk/pbx.h']),,			[ #include <asterisk.h>])
    AC_CHECK_HEADER([asterisk/devicestate.h],	AC_DEFINE(HAVE_ASTERISK_DEVICESTATE_H,1,[Found 'asterisk/devicestate.h']),,	[ #include <asterisk.h>])
    AC_CHECK_HEADER([asterisk/sched.h],		AC_DEFINE(HAVE_ASTERISK_SCHED_H,1,[Found 'asterisk/sched.h']),,			[ #include <asterisk.h>])
    AC_CHECK_HEADER([asterisk/logger.h],	AC_DEFINE(HAVE_ASTERISK_LOGGER_H,1,[Found 'asterisk/logger.h']),,		[ #include <asterisk.h>])
    AC_CHECK_HEADER([asterisk/frame.h],		AC_DEFINE(HAVE_ASTERISK_FRAME_H,1,[Found 'asterisk/frame.h']),,     	  	[ #include <asterisk.h>])
    AC_CHECK_HEADER([asterisk/translate.h],	AC_DEFINE(HAVE_ASTERISK_TRANSLATE_H,1,[Found 'asterisk/translate.h']),,   	[ #include <asterisk.h>])
    AC_CHECK_HEADER([asterisk/cli.h],		AC_DEFINE(HAVE_ASTERISK_CLI_H,1,[Found 'asterisk/cli.h']),,       	  	[ #include <asterisk.h>])
    AC_CHECK_HEADER([asterisk/features.h],	AC_DEFINE(HAVE_ASTERISK_FEATURES_H,1,[Found 'asterisk/features.h']),,    	[ #include <asterisk.h>])
    AC_CHECK_HEADER([asterisk/acl.h],		AC_DEFINE(HAVE_ASTERISK_ACL_H,1,[Found 'asterisk/acl.h']),,        	 	[ #include <asterisk.h>])
    AC_CHECK_HEADER([asterisk/astdb.h],		AC_DEFINE(HAVE_ASTERISK_ASTDB_H,1,[Found 'asterisk/astdb.h']),,   		[ #include <asterisk.h>])
    AC_CHECK_HEADER([asterisk/callerid.h],	AC_DEFINE(HAVE_ASTERISK_CALLERID_H,1,[Found 'asterisk/callerid.h']),, 		[ #include <asterisk.h>])
    AC_CHECK_HEADER([asterisk/causes.h],	AC_DEFINE(HAVE_ASTERISK_CAUSES_H,1,[Found 'asterisk/causes.h']),,      		[ #include <asterisk.h>])
    AC_CHECK_HEADER([asterisk/musiconhold.h],	AC_DEFINE(HAVE_ASTERISK_MUSICONHOLD_H,1,[Found 'asterisk/musiconhold.h']),, 	[ #include <asterisk.h>])
    AC_CHECK_HEADER([asterisk/options.h],	AC_DEFINE(HAVE_ASTERISK_OPTIONS_H,1,[Found 'asterisk/options.h']),,     	[ #include <asterisk.h>])
    AC_CHECK_HEADER([asterisk/stringfields.h],	AC_DEFINE(HAVE_ASTERISK_STRINGFIELDS_H,1,[Found 'asterisk/stringfields.h']),,	[ #include <asterisk.h>])
    AC_CHECK_HEADER([asterisk/utils.h],		AC_DEFINE(HAVE_ASTERISK_UTILS_H,1,[Found 'asterisk/utils.h']),,       		[ #include <asterisk.h>])
    AC_CHECK_HEADER([asterisk/module.h],	AC_DEFINE(HAVE_ASTERISK_MODULE_H,1,[Found 'asterisk/module.h']),,      		[ #include <asterisk.h>])
    AC_CHECK_HEADER([asterisk/manager.h],	AC_DEFINE(HAVE_ASTERISK_MANAGER_H,1,[Found 'asterisk/manager.h']),,     	[ #include <asterisk.h>])
    AC_CHECK_HEADER([asterisk/channel_pvt.h],	AC_DEFINE(HAVE_ASTERISK_CHANNEL_pvt_H,1,[Found 'asterisk/channel_pvt.h']),, 	[ #include <asterisk.h> ])
  ])
  dnl Return CFLAGS / CPPFLAGS
  CFLAGS=${CFLAGS_saved}
  CPPFLAGS=${CPPFLAGS_saved}
  LDFLAGS=${LDFLAGS_saved}
dnl END NEW NEW

  dnl AC_CHECK_HEADER (header-file, action-if-found, [action-if-not-found])
  dnl AC_EGREP_HEADER (pattern, header-file, action-if-found, [action-if-not-found])

  dnl Check Asterisk RealTime Options
  if test $REALTIME_USEABLE = 1 ; then
    AC_CHECK_HEADER(asterisk/buildopts.h,
      AC_MSG_CHECKING([checking version in asterisk/buildopts.h])
      AC_EGREP_HEADER([define DEBUG_CHANNEL_LOCKS], asterisk/buildopts.h,
        AC_DEFINE(CS_AST_DEBUG_CHANNEL_LOCKS,1,[Found 'DEBUG_CHANNEL_LOCKS' in asterisk/buildopts.h])
      )
      AC_EGREP_HEADER([define DEBUG_THREADS], asterisk/buildopts.h,
        AC_DEFINE(CS_AST_DEBUG_THREADS,1,[Found 'DEBUG_THREADS' in asterisk/buildopts.h])
      )
      AC_MSG_RESULT(['OK'])
    )
  fi
  dnl Check Asterisk Schedule Options
  if test -f $PBX_INCLUDE/sched.h; then
    AC_MSG_CHECKING([asterisk/sched.h for 'define AST_SCHED_DEL'])
    if grep -q "AST_SCHED_DEL(" $PBX_INCLUDE/sched.h; then
      AC_DEFINE(CS_AST_SCHED_DEL,1,[Found 'CS_AST_SCHED_DEL' in asterisk/sched.h])
      AC_MSG_RESULT([Found])
    else
      AC_MSG_RESULT([Not Found])
    fi
  fi
  dnl Check Asterisk RTP Options
  if test -f $PBX_INCLUDE/rtp.h; then
    AC_MSG_CHECKING([asterisk/rtp.h for 'void ast_rtp_new_source'])
    if grep -q "void ast_rtp_new_source" $PBX_INCLUDE/rtp.h;then 
      AC_DEFINE(CS_AST_RTP_NEW_SOURCE,1,[Found 'void ast_rtp_new_source' in asterisk/rtp.h])
      AC_MSG_RESULT([Found])
    else
      AC_MSG_RESULT([Not Found])
    fi
  fi
  dnl Check Asterisk Channel Options
  if test -f $PBX_INCLUDE/channel.h; then
    AC_MSG_CHECKING([asterisk/channel.h for 'struct ast_channel_tech'])
    if grep -q "struct ast_channel_tech" $PBX_INCLUDE/channel.h;then 
      AC_DEFINE(CS_AST_HAS_TECH_PVT,1,[Found 'struct ast_channel_tech' in asterisk/channel.h])
      AC_MSG_RESULT([Found])
    else
      AC_MSG_RESULT([Not Found])
    fi
    AC_MSG_CHECKING([asterisk/channel.h for 'ast_bridged_channel'])
    if grep -q "ast_bridged_channel" $PBX_INCLUDE/channel.h;then 
      AC_DEFINE(CS_AST_HAS_BRIDGED_CHANNEL,1,[Found 'ast_bridged_channel' in asterisk/channel.h])
      AC_MSG_RESULT([Found])
    else
      AC_MSG_RESULT([Not Found])
    fi
    AC_MSG_CHECKING([asterisk/channel.h for 'struct ast_callerid'])
    if grep -q "struct ast_callerid" $PBX_INCLUDE/channel.h;then 
      AC_DEFINE(CS_AST_CHANNEL_HAS_CID,1,[Found 'struct ast_callerid' in asterisk/channel.h])
      AC_MSG_RESULT([Found])
    else
      AC_MSG_RESULT([Not Found])
    fi
    AC_MSG_CHECKING([asterisk/channel.h for 'MAX_MUSICCLASS'])
    if grep -q "MAX_MUSICCLASS" $PBX_INCLUDE/channel.h;then 
      AC_MSG_RESULT([Found])
    else
      AC_DEFINE([MAX_MUSICCLASS],[MAX_LANGUAGE],[Not Found 'MAX_MUSICCLASS' in asterisk/channel.h])
      AC_MSG_RESULT([Not Found])
    fi
    AC_MSG_CHECKING([asterisk/channel.h for 'AST_FLAG_MOH'])
    if grep -q "AST_FLAG_MOH" $PBX_INCLUDE/channel.h;then  
      AC_DEFINE(CS_AST_HAS_FLAG_MOH,1,[Found 'AST_FLAG_MOH' in asterisk/channel.h])
      AC_MSG_RESULT([Found])
    else
      AC_DEFINE(AST_FLAG_MOH,1,[Not Found 'AST_FLAG_MOH' in asterisk/channel.h])
      AC_MSG_RESULT([Not Found])
    fi
    AC_MSG_CHECKING([asterisk/channel.h for 'AST_MAX_ACCOUNT_CODE'])
    if grep -q "AST_MAX_ACCOUNT_CODE" $PBX_INCLUDE/channel.h;then 
      AC_MSG_RESULT([Found])
    else
      AC_DEFINE(AST_MAX_ACCOUNT_CODE,MAX_LANGUAGE,[Found 'AST_MAX_ACCOUNT_CODE' in asterisk/channel.h])
      AC_MSG_RESULT([Not Found])
    fi
    AC_MSG_CHECKING([asterisk/channel.h for 'typedef unsigned long long ast_group_t'])
    if grep -q "typedef unsigned long long ast_group_t" $PBX_INCLUDE/channel.h;then 
      AC_DEFINE(CS_AST_HAS_AST_GROUP_T,1,[Found 'ast_group_t' in asterisk/channel.h])
      AC_MSG_RESULT([Found])
    else
      AC_MSG_RESULT([Not Found])
    fi
  fi
  dnl Check Asterisk Config Options
  if test -f $PBX_INCLUDE/config.h; then
    AC_MSG_CHECKING([asterisk/config.h for 'ast_config_load'])
    if grep -q "ast_config_load" $PBX_INCLUDE/config.h; then
      AC_MSG_RESULT([Found])
    else
      AC_DEFINE([ast_config_load(x)],[ast_load(x)],[Not Found 'ast_config_load' in asterisk/config.h])
      AC_DEFINE([ast_config_destroy(x)],[ast_destroy(x)],[Not Found 'ast_config_load' in asterisk/config.h])
      AC_MSG_RESULT([Not Found])
    fi
  fi
  dnl Check Asterisk Endianess
  if test -f $PBX_INCLUDE/endian.h; then
    AC_DEFINE([CS_AST_HAS_ENDIAN],1,[Found 'endian.h'])
  fi
  dnl Check Asterisk String Options
  if test -f $PBX_INCLUDE/strings.h; then
    AC_DEFINE([CS_AST_HAS_STRINGS],1,[Found 'strings.h'])
  fi
  dnl Check Asterisk Application Options
  if test -f $PBX_INCLUDE/app.h; then
    AC_MSG_CHECKING([asterisk/app.h for 'ast_app_has_voicemail.*folder'])
    if grep -q "ast_app_has_voicemail.*folder" $PBX_INCLUDE/app.h; then
      AC_DEFINE(CS_AST_HAS_NEW_VOICEMAIL,1,[Found 'new ast_app_has_voicemail' in asterisk/app.h])
      AC_MSG_RESULT([Found])
    else
      AC_MSG_RESULT([Not Found])
    fi
    AC_MSG_CHECKING([asterisk/app.h for 'ast_app_separate_args'])
    if grep -q "ast_app_separate_args" $PBX_INCLUDE/app.h; then
      AC_DEFINE(CS_AST_HAS_APP_SEPARATE_ARGS,1,[Found 'ast_app_separate_args'])
      AC_DEFINE(sccp_app_separate_args(x,y,z,w),ast_app_separate_args(x,y,z,w),[Found 'ast_app_separate_args' in asterisk/app.h])
      AC_MSG_RESULT([Found])
    else
      AC_MSG_RESULT([Not Found])
    fi
  fi
  dnl Check Asterisk PBX Options
  if test -f $PBX_INCLUDE/pbx.h; then
    AC_MSG_CHECKING([asterisk/pbx.h for 'ast_get_hint.*name'])
    if grep -q "ast_get_hint.*name" $PBX_INCLUDE/pbx.h; then
      AC_DEFINE(CS_AST_HAS_NEW_HINT,1,[Found 'new ast_get_hint' in asterisk/pbx.h])
      AC_MSG_RESULT([Found])
    else
      AC_MSG_RESULT([Not Found])
    fi
    AC_MSG_CHECKING([asterisk/pbx.h for 'AST_EXTENSION_ONHOLD'])
    if grep -q "AST_EXTENSION_ONHOLD" $PBX_INCLUDE/pbx.h; then
      AC_DEFINE(CS_AST_HAS_EXTENSION_ONHOLD,1,[Found 'AST_EXTENSION_ONHOLD' in asterisk/pbx.h])
      AC_MSG_RESULT([Found])
    else
      AC_MSG_RESULT([Not Found])
    fi
    AC_MSG_CHECKING([asterisk/pbx.h for 'AST_EXTENSION_RINGING'])
    if grep -q "AST_EXTENSION_RINGING" $PBX_INCLUDE/pbx.h; then
      AC_DEFINE(CS_AST_HAS_EXTENSION_RINGING,1,[Found 'AST_EXTENSION_RINGING' in asterisk/pbx.h])
      AC_MSG_RESULT([Found])
    else
      AC_MSG_RESULT([Not Found])
    fi
  fi
  dnl Check Asterisk Frame Options
  if test -f $PBX_INCLUDE/frame.h; then
    AC_MSG_CHECKING([asterisk/frame.h for 'void *data;'])
    if grep -q "void \*data;" $PBX_INCLUDE/frame.h; then
      AC_MSG_RESULT([Not Found])
    else
      AC_DEFINE(CS_AST_NEW_FRAME_STRUCT,1,[Found 'New Ast Frame Structure' in asterisk/frame.h])
      AC_MSG_RESULT([Found])
    fi
    AC_MSG_CHECKING([asterisk/frame.h for 'AST_CONTROL_VIDUPDATE'])
    if grep -q "AST_CONTROL_VIDUPDATE" $PBX_INCLUDE/frame.h; then
      AC_DEFINE(CS_AST_CONTROL_VIDUPDATE,1,[Found 'AST_CONTROL_VIDUPDATE' in asterisk/frame.h])
      AC_MSG_RESULT([Found])
    else
      AC_MSG_RESULT([Not Found])
    fi
    AC_MSG_CHECKING([asterisk/frame.h for 'AST_CONTROL_T38'])
    if grep -q "AST_CONTROL_T38_PARAMETERS" $PBX_INCLUDE/frame.h; then
      AC_DEFINE(CS_AST_CONTROL_T38_PARAMETERS,1,[Found 'AST_CONTROL_T38_PARAMETERS' in asterisk/frame.h])
      AC_MSG_RESULT([Found])
    elif grep -q "AST_CONTROL_T38" $PBX_INCLUDE/frame.h; then
      AC_DEFINE(CS_AST_CONTROL_T38,1,[Found 'AST_CONTROL_T38' in asterisk/frame.h])
      AC_MSG_RESULT([Found])
    else
      AC_MSG_RESULT([Not Found])
    fi
    AC_MSG_CHECKING([asterisk/frame.h for 'AST_CONTROL_SRCUPDATE'])
    if grep -q "AST_CONTROL_SRCUPDATE" $PBX_INCLUDE/frame.h; then
      AC_DEFINE(CS_AST_CONTROL_SRCUPDATE,1,[Found 'AST_CONTROL_SRCUPDATE' in asterisk/frame.h])
      AC_MSG_RESULT([Found])
    else
      AC_MSG_RESULT([Not Found])
    fi
    AC_MSG_CHECKING([asterisk/frame.h for 'AST_CONTROL_HOLD'])
    if grep -q "AST_CONTROL_HOLD" $PBX_INCLUDE/frame.h; then
      AC_DEFINE(CS_AST_CONTROL_HOLD,1,[Found 'AST_CONTROL_HOLD' in asterisk/frame.h])
      AC_MSG_RESULT([Found])
    else
      AC_MSG_RESULT([Not Found])
    fi
    AC_MSG_CHECKING([asterisk/frame.h for 'AST_CONTROL_CONNECTED_LINE'])
    if grep -q "AST_CONTROL_CONNECTED_LINE" $PBX_INCLUDE/frame.h; then
      AC_DEFINE(CS_AST_CONTROL_CONNECTED_LINE,1,[Found 'AST_CONTROL_CONNECTED_LINE' in asterisk/frame.h])
      AC_MSG_RESULT([Found])
    else
      AC_MSG_RESULT([Not Found])
    fi
  fi
  dnl Check Asterisk Device State Options
  if test -f $PBX_INCLUDE/devicestate.h; then
    AC_DEFINE(CS_AST_HAS_NEW_DEVICESTATE,1,[Found 'devicestate.h'])
    AC_MSG_CHECKING([asterisk/devicestate.h for 'AST_DEVICE_RINGING' in asterisk/devicestate.h])
    if grep -q "AST_DEVICE_RINGING" $PBX_INCLUDE/devicestate.h; then
      AC_DEFINE(CS_AST_DEVICE_RINGING,1,[Found 'AST_DEVICE_RINGING' in asterisk/devicestate.h])
      AC_MSG_RESULT([Found])
    else
      AC_MSG_RESULT([Not Found])
    fi
    AC_MSG_CHECKING([asterisk/devicestate.h for 'AST_DEVICE_RINGINUSE'])
    if grep -q "AST_DEVICE_RINGINUSE" $PBX_INCLUDE/devicestate.h; then
      AC_DEFINE(CS_AST_DEVICE_RINGINUSE,1,[Found 'AST_DEVICE_RINGINUSE' in asterisk/devicestate.h])
      AC_MSG_RESULT([Found])
    else
      AC_MSG_RESULT([Not Found])
    fi
    AC_MSG_CHECKING([asterisk/devicestate.h for 'AST_DEVICE_ONHOLD'])
    if grep -q "AST_DEVICE_ONHOLD" $PBX_INCLUDE/devicestate.h; then
      AC_DEFINE(CS_AST_DEVICE_ONHOLD,1,[Found 'AST_DEVICE_ONHOLD' in asterisk/devicestate.h])
      AC_MSG_RESULT([Found])
    else
      AC_MSG_RESULT([Not Found])
    fi
    AC_MSG_CHECKING([asterisk/devicestate.h for 'ast_devstate_changed'])
    if grep -q "ast_devstate_changed" $PBX_INCLUDE/devicestate.h; then
      AC_DEFINE(CS_NEW_DEVICESTATE,1,[Found 'new ast_devstate_changed' in asterisk/devicestate.h])
      AC_MSG_RESULT([Found])
    else
      AC_MSG_RESULT([Not Found])
    fi
  fi
  dnl Check Asterisk CLI Options
  if test -f $PBX_INCLUDE/cli.h; then
    AC_MSG_CHECKING([asterisk/cli.h for 'ast_cli_generator'])
    if grep -q "ast_cli_generator" $PBX_INCLUDE/cli.h; then
      AC_DEFINE(CS_NEW_AST_CLI,1,[Found 'new ast_cli_generator definition' in asterisk/cli.h])
      AC_MSG_RESULT([Found])
    else
      AC_MSG_RESULT([Not Found])
    fi
    AC_MSG_CHECKING([asterisk/cli.h for 'const char * const *argv'])
    if grep -q "const char * const *argv" $PBX_INCLUDE/cli.h; then
      AC_DEFINE(CS_NEW_AST_CLI_CONST,1,[Found 'const char * const *argv' in asterisk/cli.h])
      AC_MSG_RESULT([Found])
    else
      AC_MSG_RESULT([Not Found])
    fi
  fi
  dnl Check Asterisk Lock Options
  if test -f $PBX_INCLUDE/lock.h; then
    AC_MSG_CHECKING([asterisk/lock.h for 'ast_lock_track'])
    if grep -q "ast_lock_track" $PBX_INCLUDE/lock.h; then
      AC_DEFINE(CS_AST_HAS_TRACK,1,[Found 'ast_lock_track' in asterisk/lock.h])
      AC_MSG_RESULT([Found])
    else
      AC_MSG_RESULT([Not Found])
    fi
  fi
  dnl Check Asterisk Event Options
  if test -f $PBX_INCLUDE/event.h; then
    AC_MSG_CHECKING([asterisk/event.h for 'ast_event_subscribe'])
    if grep -q "ast_event_subscribe" $PBX_INCLUDE/event.h; then
      AC_DEFINE(CS_AST_HAS_EVENT,1,[Found 'ast_event_subscribe' in asterisk/event.h])
      AC_MSG_RESULT([Found])
    else
      AC_MSG_RESULT([Not Found])
    fi
  fi
  dnl Check Asterisk Copy String Options
  AC_MSG_CHECKING([asterisk for 'ast_copy_string'])
  if grep -rq "ast_copy_string" $PBX_INCLUDE/; then
    AC_DEFINE([sccp_copy_string(x,y,z)],[ast_copy_string(x,y,z)],[Found 'ast_copy_string' in asterisk])
    AC_MSG_RESULT([Found])
  else
    AC_DEFINE([sccp_copy_string(x,y,z)],[strncpy(x,y,z - 1)],[Found 'ast_copy_string' in asterisk])
    AC_MSG_RESULT([Not Found])
  fi
  AC_MSG_CHECKING([asterisk for 'ast_string_field_'])
  if grep -rq "ast_string_field_" $PBX_INCLUDE/; then
    AC_DEFINE(CS_AST_HAS_AST_STRING_FIELD,1,[Found 'ast_string_field_' in asterisk])
    AC_MSG_RESULT([Found])
  fi
fi
dnl Set Module Directory
csmoddir="$PBX_MODDIR"
# directory for modules
if test -z "${csmoddir}"; then
  # fallback to asterisk modules directory
  csmoddir="${PBX_LIB}/asterisk/modules"
fi
AC_SUBST([csmoddir])

AC_DEFINE_UNQUOTED([BUILD_USER],"`${WHOAMI}`",[building user])

dnl Doxygen
CONFIGURE_PART([Checking for Doxygen:])
DX_HTML_FEATURE(ON)
DX_CHM_FEATURE(OFF)
DX_CHI_FEATURE(OFF)
DX_MAN_FEATURE(ON)
DX_RTF_FEATURE(OFF)
DX_XML_FEATURE(OFF)
DX_PDF_FEATURE(OFF)
DX_PS_FEATURE(OFF)
DX_INIT_DOXYGEN($PACKAGE, doc/doxygen.cfg)

CONFIGURE_PART([Generating Configuration and Makefiles])
AC_CONFIG_FILES([
   Makefile
   README
   doc/Makefile
   src/Makefile
])

AH_BOTTOM([
#endif /* CHAN_SCCP_CONFIG_H */
])

AC_OUTPUT

echo
echo "Architecture: $build_cpu"
echo "  Build user: $BUILD_USER"
echo "  CPU -march: $march"
echo "      CFLAGS: $CFLAGS $PBX_CFLAGS"
echo "     LDFLAGS: $LDFLAGS"
echo "    PBX_TYPE: $PBX_TYPE"
echo "     PBX_LIB: $PBX_LIB"
echo " PBX_INCLUDE: $PBX_INCLUDE"
echo "      config: /etc"
echo "     modules: ${csmoddir}"
