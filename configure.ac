dnl Process this file with autoconf to produce a configure script.
AC_PREREQ(2.53)
AC_INIT([Chan_SCCP],
        [TRUNK],
        [https://sourceforge.net/projects/chan-sccp-b/],
        [Chan_SCCP])

AC_CONFIG_AUX_DIR([autoconf])
AC_CONFIG_MACRO_DIR([autoconf])

dnl Get version information from repository
CS_GET_VERSION([.])

dnl cross-compile macros
AC_CANONICAL_BUILD
AC_CANONICAL_HOST
AC_CANONICAL_TARGET 

AC_CONFIG_HEADER(src/config.h)


AH_TOP([
/*!
 * \file 	config.h
 * \brief 	SCCP Config File
 * \author 	Diederik de Groot <dkgroot [at] talon.nl>
 * \note	This file is automatically generated by configure
 * \note 	Do not change this file. Change will be lost when running configure
 */

#ifndef CHAN_SCCP_CONFIG_H
#define CHAN_SCCP_CONFIG_H
])

CONFIGURE_PART([Checking AutoMake:])
AM_INIT_AUTOMAKE([1.9 -Wno-portability check-news dist-bzip2 dist-tarZ no-define nostdinc])
m4_ifdef([AM_SILENT_RULES],[AM_SILENT_RULES([yes])])
AM_DISABLE_STATIC([])

# check existence of the package
AC_CONFIG_SRCDIR([src/chan_sccp.c]) 

AC_COPYRIGHT("Chan_SCCP")
AC_REVISION($Revision$) 
# Build paths and variables

dnl Create the relevant Build variables
AC_PATH_TOOL([UNAME], [uname], No)
AC_PATH_PROGS(DATE,date,[echo date not found so no daten info will be available])
AC_PATH_PROGS(UNAME,uname,[echo uname not found so no version info will be available])
AC_PATH_PROGS(WHOAMI,whoami,[echo whoami not found so no builduser info will be available])
AC_PATH_PROGS(FINGER,finger,[echo finger not found so no builduser info will be available])
AC_PATH_PROGS(HEAD,head,[echo finger not found so no builduser info will be available])
AC_PATH_PROGS(CUT,cut,[echo finger not found so no builduser info will be available])
if test ! x"${UNAME}" = xNo; then
    if test -n $BUILD_OS ; then
        BUILD_DATE="`date -u "+%Y-%m-%d %H:%M:%S"` UTC"
	AC_DEFINE_UNQUOTED([BUILD_DATE],"`${DATE} -u "+%Y-%m-%d %H:%M:%S"` UTC",[The date of this build])
	AC_DEFINE_UNQUOTED([BUILD_OS],"`${UNAME} -s`",[Operating System we are building on])
	AC_DEFINE_UNQUOTED([BUILD_MACHINE],"`${UNAME} -m`",[Machine we are building on])
	AC_DEFINE_UNQUOTED([BUILD_HOSTNAME],"`${UNAME} -n`",[Hostname of our Box])
	AC_DEFINE_UNQUOTED([BUILD_KERNEL],"`${UNAME} -r`",[Kernel version of this build])
	AC_DEFINE_UNQUOTED([BUILD_USER],"`${FINGER} -lp $(echo "$USER") | ${HEAD} -n 1 | ${CUT} -d: -f 3`",[building user])
	AC_SUBST([BUILD_DATE])
	AC_SUBST([BUILD_OS])
	AC_SUBST([BUILD_MACHINE])
	AC_SUBST([BUILD_HOSTNAME])
	AC_SUBST([BUILD_KERNEL])
	AC_SUBST([BUILD_USER])
    fi
fi

AC_DEFINE_UNQUOTED([BUILD_USER],"`${WHOAMI}`",[building user])

ac_default_prefix=/usr
if test ${sysconfdir} = '${prefix}/etc'; then
  sysconfdir=/etc
fi
if test ${mandir} = '${prefix}/man'; then
  mandir=/usr/share/man
fi
CONFIGURE_PART([Checking host platform:])
case "${host}" in
  *-*-darwin*)
        AC_DEFINE([__Darwin__],,[Define if Darwin])
        AC_SUBST(__Darwin__)
	no_libcap=yes
	ostype=bsd
        ;;
  *-*-freebsd*)
	no_libcap=yes
	ostype=bsd
        ;;
  *-*-netbsd*)
	no_libcap=yes
	ostype=bsd
	;;
  *-*-openbsd*)
	no_libcap=yes
	ostype=bsd
	;;
  *-*-dragonfly*)
	no_libcap=yes
	ostype=bsd
	;;
  *-aix*)
    AC_DEFINE(AIX,,[Define if AIX])
     broken_types=yes
	no_libcap=yes
	ostype=aix
    ;;
  *-osf4*)
    AC_DEFINE(OSF1,,[Define if OSF1])
    tru64_types=yes
	no_libcap=yes
	ostype=osf
    ;;
  *-osf5.1*)
    AC_DEFINE(OSF1)
	no_libcap=yes
	ostype=osf
    ;;
  *-tru64*)
    AC_DEFINE(OSF1)
	tru64_types=yes
	no_libcap=yes
	ostype=osf
    ;;
  *-*-linux*)
	ostype=linux
	LARGEFILE_FLAGS="-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"
	CFLAGS="$CFLAGS $LARGEFILE_FLAGS"
        ;;
  *cygwin*)
        AC_DEFINE([_WIN32_WINNT],[0x0500],[Heya, it's windows])
        AC_DEFINE([INET_ADDRSTRLEN],[16],[cygwin detection does not work for that, anybody has an idea ?])
        AC_DEFINE([INET6_ADDRSTRLEN],[46],[cygwin detection does not work for that, anybody has an idea ?])
	AC_DEFINE([__CYGWIN__],[1],[make sure __CYGWIN__ is defined ...])
	ostype=cygwin
        ;;
  *-*-solaris2*)
        AC_DEFINE([SOLARIS],[1],[needed for optional declarations to be visible])
	no_libcap=yes
	ostype=solaris
	force_generic_timers=yes
        ;;
  *)
        AC_MSG_RESULT(Unsupported operating system: ${host})
	no_libcap=yes
	ostype=unknown
        ;;
esac  
AC_SUBST(ostype)

# This needs to be before any macros that use the C compiler
AC_GNU_SOURCE

# cross-compile checks
if test "$host" = "$build"; then
	HOST_CC="${CC}"
else
	HOST_CC="${HOST_CC-gcc}"
fi
AC_CHECK_PROG(have_host_cc, ${HOST_CC}, yes, no)
if test "$have_host_cc" = "no"; then
	AC_MSG_ERROR(No valid host compiler set with HOST_CC)
fi
AC_SUBST(HOST_CC)

# Checks for programs.
CONFIGURE_PART([Checking for standard programs:])
AC_PATH_PROGS(GREP, ggrep grep,[echo Missing grep so skipping but I doubt we will get anywhere])
AC_PATH_PROGS(SVN, svn, [echo Missing subversion so some stuff will be borked],${PATH}:/opt/csw/bin)
AC_PATH_PROGS(SHELL,bash sh,[echo No compatible shell found])
AC_PATH_PROGS(SH,bash sh,[echo No compatible shell found])
AC_PATH_PROGS(M4,gm4 m4,[echo No m4 found, who will process my macros now ?])
AC_PATH_PROGS(SED,gsed sed,[echo sed not found, doh!])
AC_PATH_PROGS(CAT,cat,[echo cat not found, Doh!])
AC_PATH_PROGS(TR,tr,[echo tr not found, need this for upper/lowercase conversions])
AC_PATH_PROGS(UNAME,uname,[echo uname not found so no version info will be available])
AC_PATH_PROGS(WHOAMI,whoami,[echo whoami not found so no version info will be available])
AC_PATH_PROGS(RPMBUILD,rpmbuild,[echo rpmbuild not found so your cannot build rpm packages])
AC_PROG_CC
AC_PROG_CC_C_O
AC_PROG_CXX
AC_PROG_GCC_TRADITIONAL
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LIBTOOL   
AC_PROG_AWK
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_FUNC_STRERROR_R
AC_LANG_C
AC_C_CONST
AC_C_INLINE 		dnl wanted by: src/chan_sccp.h:138

# LibTool
CONFIGURE_PART([Checking Libtool:])
LT_PREREQ([2.0.0])
LT_INIT([dlopen])
LTDL_INIT([])
if test "x$with_included_ltdl" != "xyes"; then
  save_CFLAGS="$CFLAGS"
  save_LDFLAGS="$LDFLAGS"
  CFLAGS="$CFLAGS $LTDLINCL"
  LDFLAGS="$LDFLAGS $LIBLTDL"
  AC_CHECK_LIB([ltdl], [lt_dladvise_init],
                [],
        [AC_MSG_ERROR([installed libltdl is too old])])
  LDFLAGS="$save_LDFLAGS"
  CFLAGS="$save_CFLAGS"
fi
AC_SUBST([LIBTOOL_DEPS])

LIBS_save=$LIBS
LIBS="$LIBS"

# Check for headers, structures, typedefs, libs etc which are not related to specific add-on packages
CONFIGURE_PART([Checking for Required Libraries:])
dnl check for required libraries (also for add-ons)
AC_CHECK_LIB([c], [main])
AC_CHECK_LIB([pthread], [main])
AC_CHECK_LIB([socket], [main])
AC_CHECK_HEADERS([sys/ioctl.h]) 
AC_CHECK_HEADERS([sys/socket.h])
AC_CHECK_HEADERS([netinet/in.h])
AC_CHECK_HEADERS([pthread.h])

AC_FUNC_MALLOC
AC_FUNC_REALLOC
AC_FUNC_MALLOC 
AC_FUNC_REALLOC
AC_CHECK_FUNCS([gethostbyname inet_ntoa memset mkdir select socket strsep strcasecmp strchr strdup strerror strncasecmp strerror strchr]) 

AC_HEADER_STDC    
AC_HEADER_STDBOOL 
AC_CHECK_HEADERS([netinet/in.h])

AC_STRUCT_TM
AC_STRUCT_TIMEZONE

dnl check compiler specifics
AC_C_INLINE
AC_C_CONST 
AC_C_VOLATILE

AC_TYPE_INT32_T
AC_TYPE_INT64_T
AC_TYPE_SIZE_T
AC_TYPE_SSIZE_T
dnl AC_TYPE_UINT16_T 
dnl AC_TYPE_UINT32_T 
dnl AC_TYPE_UINT8_T
dnl check declarations
AC_CHECK_DECLS(INET_ADDRSTRLEN,[],[],[#if HAVE_NETINET_IN_H
# include <netinet/in.h>
# endif
#if HAVE_W32API_WS32TCPIP_H
# include w32api/windows.h
# include w32api/winsock2.h  
# include w32api/ws2tcpip.h
#endif
])
AC_CHECK_DECLS(INET6_ADDRSTRLEN,[],[],[#if HAVE_NETINET_IN_H
# include <netinet/in.h>
# endif
#if HAVE_W32API_WS32TCPIP_H
# include w32api/windows.h
# include w32api/winsock2.h
# include w32api/ws2tcpip.h
#endif
])   
# more type checks, horrible shit
if test "$tru64_types" = "yes"; then
        AC_CHECK_TYPE(u_int8_t, unsigned char)
        AC_CHECK_TYPE(u_int16_t, unsigned short)
        AC_CHECK_TYPE(u_int32_t, unsigned int)
else
        if test "$broken_types" = "yes" ; then
                AC_CHECK_TYPE(u_int8_t, unsigned char)
                AC_CHECK_TYPE(u_int16_t, unsigned short)
                AC_CHECK_TYPE(u_int32_t, unsigned long int)
        else
                AC_CHECK_TYPE(u_int8_t, uint8_t)
                AC_CHECK_TYPE(u_int16_t, uint16_t)
                AC_CHECK_TYPE(u_int32_t, uint32_t)
        fi
fi


dnl
dnl Check for svn2cl for generating ChangeLog
dnl
enable_svn2cl=yes
AC_PATH_PROG([SVN2CL], [svn2cl])
if test -z "$SVN2CL"; then
  enable_svn2cl=no
fi

AM_CONDITIONAL(ENABLE_SVN2CL, test x$enable_svn2cl != xno)

AC_ARG_WITH(changelog-oldest,
	    AC_HELP_STRING([--with-changelog-oldest=NUMBER],
			   [Oldest revision to include in ChangeLog]))

CHANGELOG_OLDEST=1021
if test "x$with_changelog_oldest" != "x" ; then
  CHANGELOG_OLDEST=$with_changelog_oldest
fi
AC_SUBST(CHANGELOG_OLDEST) 


# Big Endian / Little Endian	
AC_C_BIGENDIAN(AC_DEFINE([__BYTE_ORDER],__BIG_ENDIAN,[Big Endian]),AC_DEFINE([__BYTE_ORDER],__LITTLE_ENDIAN,[Little Endian]))
AC_DEFINE([__LITTLE_ENDIAN],1234,[for the places where it is not defined])
AC_DEFINE([__BIG_ENDIAN],4321,[for the places where it is not defined])

# Configure Options
CONFIGURE_PART([Checking Configure Options:])

dnl Optimize for host cpu version
AC_ARG_ENABLE(optimization,     
	[AC_HELP_STRING([--disable-optimization],[no detection or tuning flags for cpu version])],
	[OPTIMIZECPU="$enableval"],[OPTIMIZECPU="yes"])

dnl Enable debugging
if test "${SCCP_BRANCH}" == "TRUNK"; then 
	strip_binaries="no"
        GDB_FLAGS="-g"
else 
	strip_binaries="yes"
        GDB_FLAGS=""
fi
AC_ARG_ENABLE(debug,
	[AC_HELP_STRING([--enable-debug],[build with debug information])],[enable_debug="yes"],)
if test "${enable_debug}" = "yes"; then
   AC_DEFINE([DEBUG],[],[Enable extra debugging.])
   enable_do_crash="yes"
   enable_debug_mutex="yes"
   strip_binaries="no"
   GDB_FLAGS="-g"
else
   AC_DEFINE([DEBUG],[],[Disabled extra debugging.])
   enable_do_crash="no"
   enable_debug_mutex="no"
   strip_binaries="yes"
   GDB_FLAGS=""
fi
AM_CONDITIONAL([WANT_DEBUG],[test "${enable_debug}" = "yes"])
AC_SUBST([strip_binaries])
AC_SUBST([GDB_FLAGS])

PBX_PATH="/usr /usr/local/ssl /usr/lib/ssl /usr/ssl /usr/pkg /usr/local /usr/sfw";
AC_ARG_WITH([asterisk],
    [AC_HELP_STRING([--with-asterisk=PATH],[Location of the Asterisk installation])],[PBX_PATH="${withval}"],)
    if test "x${PBX_PATHl}" = "xyes"; then 
    	PBX_PATH="/usr /usr/local/ssl /usr/lib/ssl /usr/ssl /usr/pkg /usr/local /usr/sfw"; 
    fi
AC_ARG_WITH([callweaver],
    [AC_HELP_STRING([--with-callwaver=PATH],[Location of the Callweaver installation])],[PBX_PATH="${withval}"],)
    if test "x${PBX_PATH}" = "xyes"; then 
    	PBX_PATH="/usr /usr/local/ssl /usr/lib/ssl /usr/ssl /usr/pkg /usr/local /usr/sfw"; 
    fi
dnl AC_ARG_WITH(asterisk-includes,
dnl     AS_HELP_STRING([--with-asterisk-includes=PATH], [Path to Asterisk includes (defaults to PREFIX/include)]),
dnl     [ASTERISK_CFLAGS="-I$withval"])
dnl AC_ARG_WITH(asterisk-libs,
dnl     AS_HELP_STRING([--with-asterisk-libs=PATH], [Path to Asterisk includes (defaults to PREFIX/lib)]),
dnl     [ASTERISK_LDFLAGS="-L$withval"])
dnl AC_ARG_WITH(callweaver-includes,
dnl     AS_HELP_STRING([--with-callweaver-includes=PATH], [Path to CallWeaver includes (defaults to PREFIX/include)]),
dnl     [CALLWEAVER_CFLAGS="-I$withval"])
dnl AC_ARG_WITH(callweaver-libs,
dnl     AS_HELP_STRING([--with-callweaver-libs=PATH], [Path to CallWeaver includes (defaults to PREFIX/lib)]),
dnl     [CALLWEAVER_LDFLAGS="-L$withval"])
   
CFLAGS_saved="$CFLAGS"
CPPFLAGS_saved="$CPPFLAGS"
LDFLAGS_saved="$LDFLAGS"
AC_SUBST([PBX_PATH])
PBX_MANDATORY="yes"
CS_CHECK_PBX

if test "${PBX_TYPE}" = "Asterisk"; then
   AC_DEFINE([PBX_TYPE],"ASTERISK",[PBX Type])
   dnl Figure out the Asterisk Version
   GET_ASTERISK_VERSION
   dnl Run Standard Asterisk Header Tests
   FIND_ASTERISK_HEADERS
   dnl Check the found Asterisk for their content
   CHECK_ASTERISK_HEADER_CONTENT
elif test "${PBX_TYPE}" = "Callweaver"; then
   AC_DEFINE([PBX_TYPE],"|CALLWEAVER",[PBX Type])
   dnl Figure out the Asterisk Version
   echo "We are working on a Callweaver version"
else
   echo ""
   echo ""
   echo "PBX type could not be determined"
   echo "================================"
   echo "Either install asterisk and asterisk-devel packages"
   echo "Or specify the location where asterisk can be found, using ./configure --with-asterisk=[path]"
   exit
fi
AC_SUBST([PBX_TYPE])

dnl echo "CFLAGS: $CFLAGS"
dnl echo "CPPFLAGS: $CPPFLAGS"
dnl echo "LDFLAGS: $LDFLAGS"
dnl Add Arguments to configure
AC_ARG_WITH(pickup, 
  AC_HELP_STRING([--with-pickup],       [build with pickup function (default is YES)]), 
  ac_cv_use_pickup=no, ac_cv_use_pickup=yes)
	AS_IF([test "${ac_cv_use_pickup}" == "yes"], [
        	AC_DEFINE(CS_SCCP_PICKUP, 1, [Enable pickup function])
])

AC_ARG_WITH(park, 
  AC_HELP_STRING([--with-park], [build with park funktion (default is YES)]), 
  ac_cv_use_park=no, ac_cv_use_park=yes)
	AS_IF([test "${ac_cv_use_park}" == "yes"], [
        	AC_DEFINE(CS_SCCP_PARK, 1, [Enable park function])
])

AC_ARG_WITH(dirtrfr, 
  AC_HELP_STRING([--with-dirtrfr], [Build DIRTRFR functions (default is YES)]), 
  ac_cv_use_dirtrfr=no, ac_cv_use_dirtrfr=yes)
	AS_IF([test "${ac_cv_use_dirtrfr}" == "yes"], [
        	AC_DEFINE(CS_SCCP_DIRTRFR, 1, [Enable DIRTRFR function])
])

AC_ARG_WITH(monitor, 
  AC_HELP_STRING([--with-monitor], [Build monitor functions (default is YES)]), 
  ac_cv_use_monitor=no, ac_cv_use_monitor=yes)
	AS_IF([test "${ac_cv_use_monitor}" == "yes"], [
        	AC_DEFINE(CS_SCCP_FEATURE_MONITOR, 1, [Enable monitor function])
])

AC_ARG_WITH(conference, 
  AC_HELP_STRING([--with-conference], [Build conference functions (default is NO)]), 
  ac_cv_use_conference=yes, ac_cv_use_conference=no)
AS_IF([test "${ac_cv_use_conference}" == "yes"], [
        AC_DEFINE(CS_SCCP_CONFERENCE, 1, [Enable conference function])
])

AC_ARG_WITH(manager, 
  AC_HELP_STRING([--with-manager], [Build manager functions (default is YES)]), 
  ac_cv_use_manager=no, ac_cv_use_manager=yes)
	AS_IF([test "${ac_cv_use_manager}" == "yes"], [
        	AC_DEFINE(CS_MANAGER_EVENTS, 1, [Enable manager events])
	        AC_DEFINE(CS_SCCP_MANAGER, 1, [Enable manager console control])
])

AC_ARG_WITH(indications, 
  AC_HELP_STRING([--with-indications], [Debug SCCP indications (default is NO)]), 
  ac_cv_debug_indications=yes, ac_cv_debug_indications=no)
	AS_IF([test "${ac_cv_debug_indications}" == "yes"], [
        	AC_DEFINE(CS_DEBUG_INDICATIONS, 1, [Debug SCCP indications])
])

AC_ARG_WITH(realtime, 
  AC_HELP_STRING([--with-realtime], [Debug SCCP realtime (default is YES)]), 
  ac_cv_realtime=no, ac_cv_realtime=yes)
    AS_IF([test "${ac_cv_realtime}" == "yes"], [
    	AC_DEFINE(CS_SCCP_REALTIME, 1, [Debug SCCP realtime])
])

AC_ARG_WITH(feature_monitor, 
  AC_HELP_STRING([--with-feature-monitor], [Debug SCCP feature monitor (default is NO)]), 
  ac_cv_feature_monitor=yes, ac_cv_feature_monitor=no)
    AS_IF([test "${ac_cv_feature_monitor}" == "yes"], [
       	AC_DEFINE(CS_SCCP_FEATURE_MONITOR, 1, [Debug SCCP feature monitor])
])


AC_ARG_WITH(advanced_functions, 
  AC_HELP_STRING([--with-advanced-functions], [Debug SCCP advanced functions (default is NO)]), 
    ac_cv_advanced_functions=yes, ac_cv_advanced_functions=no)
    AS_IF([test "${ac_cv_advanced_functions}" == "yes"], [
       	AC_DEFINE(CS_ADV_FEATURES, 1, [Debug SCCP advanced functions])
])

AC_ARG_WITH(dynamic_speeddial, 
  AC_HELP_STRING([--with-dynamic-speeddial], [Using dynamic speeddials (default is NO)]), 
  ac_cv_dynamic_speeddial=yes, ac_cv_dynamic_speeddial=no)
    AS_IF([test "${ac_cv_dynamic_speeddial}" == "yes"], [
       	AC_DEFINE(CS_DYNAMIC_SPEEDDIAL, 1, [Using dynamic speeddials])
])

dnl Return CFLAGS / CPPFLAGS
CFLAGS=${CFLAGS_saved}
CPPFLAGS=${CPPFLAGS_saved}
LDFLAGS=${LDFLAGS_saved}

dnl Set Module Directory
csmoddir="$PBX_MODDIR"
# directory for modules
if test -z "${csmoddir}"; then
  # fallback to asterisk modules directory
  csmoddir="${PBX_LIB}/asterisk/modules"
fi
AC_SUBST([csmoddir])

AC_DEFINE_UNQUOTED([BUILD_USER],"`${WHOAMI}`",[building user])

# substitutes
AC_SUBST(SVN)
AC_SUBST(GREP)
AC_SUBST(CPU_OPTIONS)
AC_SUBST(prefix)
AC_SUBST(RPMBUILD)

dnl Doxygen
CONFIGURE_PART([Checking for Doxygen:])
DX_HTML_FEATURE(ON)
DX_CHM_FEATURE(OFF)
DX_CHI_FEATURE(OFF)
DX_MAN_FEATURE(ON)
DX_RTF_FEATURE(OFF)
DX_XML_FEATURE(OFF)
DX_PDF_FEATURE(OFF)
DX_PS_FEATURE(OFF)
DX_INIT_DOXYGEN($PACKAGE, doc/doxygen.cfg)

CONFIGURE_PART([Generating Configuration and Makefiles])
AC_CONFIG_FILES([
   Makefile
   README
   doc/Makefile
   src/Makefile
])

AH_BOTTOM([
#endif /* CHAN_SCCP_CONFIG_H */
])

AC_OUTPUT

#
# Fixing the PACKAGE_* redefines    
#
# because AM_INIT_MAKE([no-define]) doesn't work anymore since autoconf v2.59 we have to resort to remarking out 
# the generated PACKAGE_* defines.
# See: http://www.mail-archive.com/automake@gnu.org/msg04576.html
# 
# Untill the Asterisk groups stops exporting these PACKAGE_ defines or autoconf fixes this issue, these replacements will
# have to remain.
#
# we are not using the PACKAGE_ define in any of the sources
#
sed -e "s/^\(\#define PACKAGE_[A-Z]*\)$/\/\* \1 \*\//g" src/config.h >src/config.h.tmp && mv src/config.h.tmp src/config.h
sed -e "s/^\(\#undef PACKAGE_[A-Z]*\)$/\/\* \1 \*\//g" src/config.h.in >src/config.h.in.tmp && mv src/config.h.in.tmp src/config.h.in

echo
echo "Architecture: $build_cpu"
echo "  Build user: $BUILD_USER"
echo "  CPU -march: $march"
echo "      CFLAGS: $CFLAGS $PBX_CFLAGS"
echo "     LDFLAGS: $LDFLAGS $PBX_LDFLAGS"
echo "    PBX_TYPE: $PBX_TYPE"
echo "     PBX_LIB: $PBX_LIB"
echo " PBX_INCLUDE: $PBX_INCLUDE"
echo "      config: /etc"
echo "     modules: ${csmoddir}"
